server.port=8081
spring.application.name=provider
#dubbo 组件扫描的基础包
dubbo.scan.base-packages=com.cloud.provide.impl
dubbo.protocol.name=dubbo
dubbo.protocol.port=12345
embedded.zookeeper.port=2181
#dubbo.registry.address=N/A dubbo 直连
##动态配置中心
#dubbo.config-center.address=zookeeper://127.0.0.1:${embedded.zookeeper.port}
#注册中心配置
#多注册中心配置
dubbo.registries.test1.address=zookeeper://127.0.0.1:${embedded.zookeeper.port}
#单注册中心配置
#dubbo.registry.address=zookeeper://127.0.0.1:${embedded.zookeeper.port}
## 元数据中心
#dubbo.metadata-report.address=zookeeper://127.0.0.1:${embedded.zookeeper.port}\
##服务质量配置 提供Telnet命令查询调用者和服务者状态 在线运维
#dubbo.application.qos-port=33333
#消息派发 all所有消息发到线程池，包含请求、响应、连接事件、断开事件、心跳
#direct 所有消息都不派发到线程池，全部IO线程上直接运行
#message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行
#execution 只有请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行
#connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池
dubbo.protocol.dispatcher=all
#线程池设计 fixed固定大小线程池启动时建立，不关闭 缺省
# cache 缓存线程池，空闲一分钟自动删除，需要时重建
# limited 可伸缩线程池，但池中的线程数只会增加不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题
# eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)
dubbo.protocol.threadname=zookeeper
dubbo.protocol.threadpool=fixed
#线程池大小
dubbo.protocol.threads=300
#只订阅不注册 用于开发生产者服务
#为方便开发测试，经常会在线下共用一个所有服务可用的注册中心，这时，如果一个正在开发中的服务提供者注册，可能会影响消费者不能正常运行。
#可以让服务提供者开发方，只订阅服务(开发的服务可能依赖其它服务)，而不注册正在开发的服务，通过直连测试正在开发的服务
#dubbo.registry.register=false
#将注册中心的服务提供者设为非动态管理模式
dubbo.registry.dynamic=false
